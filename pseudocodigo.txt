Entrada: 
    - Um arquivo contendo a representação do grafo:
      * Primeira linha: número de vértices (n) e número de arestas (m)
      * Linhas seguintes: arestas no formato "e x y" (conectando os vértices x e y)

Saída:
    - O tamanho da maior comunidade conectada
    - Os vértices pertencentes a essa comunidade, armazenados em um arquivo "resultado.txt"

---

Definir estrutura Grafo:
    Lista de adjacência: Vertices[MAXV]  // Lista ligada para cada vértice
    Grau[MAXV]  // Armazena o grau de cada vértice
    qntdVertices  // Número total de vértices
    qntdArestas  // Número total de arestas

---

Função CriaGrafo(G):
    Para i de 1 até MAXV:
        G.Vertices[i] ← NULL
        G.Grau[i] ← 0
    G.qntdVertices ← 0
    G.qntdArestas ← 0

---

Função insereAresta(G, x, y):
    Criar novo nó para y
    Adicionar y na lista de adjacência de x
    Criar novo nó para x
    Adicionar x na lista de adjacência de y
    Incrementar G.Grau[x] e G.Grau[y]

---

Função elementos_do_grafo(G, arquivo):
    Abrir arquivo para leitura
    Se falha ao abrir:
        Exibir erro e encerrar
    
    Ler (G.qntdVertices, n) do arquivo
    
    Chamar CriaGrafo(G)
    
    Para i de 1 até n:  // Percorrer todas as arestas
        Ler (tipo, x, y) do arquivo
        Se tipo == "e":
            Chamar insereAresta(G, x, y)
    
    Fechar arquivo

---

Função estaConectadoATodos(G, v, comunidade[], tamanho):
    Para cada nó u em comunidade:
        Se v não está na lista de adjacência de u:
            Retornar FALSO
    Retornar VERDADEIRO

---

Função encontrarMaiorComunidade(G):
    Inicializar maxGrau ← -1
    Inicializar v0 ← -1  // Vértice inicial
    
    Para cada v de 1 até G.qntdVertices:
        Se G.Grau[v] > maxGrau:
            maxGrau ← G.Grau[v]
            v0 ← v
    
    Se v0 = -1:
        Retornar comunidade vazia
    
    Criar lista comunidade[]
    comunidade[0] ← v0
    tamanhoAtual ← 1
    
    Para cada v de 1 até G.qntdVertices:
        Se v ≠ v0 e G.Grau[v] > 0:
            Se estaConectadoATodos(G, v, comunidade, tamanhoAtual):
                Adicionar v à comunidade
                tamanhoAtual ← tamanhoAtual + 1
    
    Retornar comunidade, tamanhoAtual

---

Função salvarResultado(tamanho, comunidade):
    Abrir arquivo "resultado.txt" para escrita
    Se erro ao abrir:
        Exibir mensagem e encerrar
    
    Escrever "Tamanho da maior comunidade: tamanho"
    Escrever "Membros:", listar todos os vértices da comunidade
    
    Fechar arquivo
    Exibir mensagem "A resposta foi salva no arquivo resultado.txt"

---

Função main():
    Criar um grafo G
    Chamar elementos_do_grafo(G, "arquivo.txt")
    Chamar encontrarMaiorComunidade(G)
    Chamar salvarResultado(tamanho, comunidade)
    
    Encerrar programa

